#include "autodiff.hpp"

template <uint32_t dim> autodiff_vec<dim> autodiff_vec<dim>::operator+(const autodiff_vec<dim> &a) {
    autodiff_vec<dim> res;
    for (auto i = 0; i < dim; i++)
        res.data[i] = data[i] + a.data[i];
    return res;
}

template <uint32_t dim> autodiff_vec<dim> autodiff_vec<dim>::operator-(const autodiff_vec<dim> &a) {
    decltype(*this) res;
    for (auto i = 0; i < dim; i++)
        res.data[i] = data[i] - a.data[i];
    return res;
}

template <uint32_t dim> autodiff_vec<dim> autodiff_vec<dim>::operator*(const autodiff_vec<dim> &a) {
    decltype(*this) res;
    for (auto i = 0; i < dim; i++)
        res.data[i] = data[i] * a.data[i];
    return res;
}

template <uint32_t dim> autodiff_vec<dim> autodiff_vec<dim>::operator/(const autodiff_vec<dim> &a) {
    decltype(*this) res;
    for (auto i = 0; i < dim; i++)
        res.data[i] = data[i] / a.data[i];
    return res;
}

namespace GeometryAutodiff {
template <uint32_t dim> autodiff::var dot(const autodiff_vec<dim> &vec1, const autodiff_vec<dim> &vec2) {
    autodiff::var result;
    for (auto i = 0; i < dim; i++) {
        result = vec1.data[i] * vec2.data[i];
    }
    return result;
}
} // namespace GeometryAutodiff