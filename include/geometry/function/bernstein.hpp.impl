#include "bernstein.hpp"

template <size_t len>
std::array<float, len> BernsteinBasisFunction::evaluate(double param,
                                                        std::vector<std::array<float, len>> &coefficients) {
    using namespace boost::math::interpolators;

    auto bp = BernsteinPolynomial(coefficients);

    auto res = bp(param);
    auto tmp = bp.prime(param);

    return res;
}

template <size_t len>
std::array<float, len> BernsteinBasisFunction::evaluate_derivative(double param,
                                                                   std::vector<std::array<float, len>> &coefficients) {
    auto n = coefficients.size();
    using namespace boost::math::interpolators;

    auto bp = BernsteinPolynomial(coefficients);
    auto tmp = bp(param);
    auto res = bp.prime(param);

    return res;
}

template <std::ranges::random_access_range RandomAccessContainer>
void BernsteinPolynomial<RandomAccessContainer>::decasteljau_recursion(RandomAccessContainer &points, SizeType n,
                                                                       Real t) const {
    if (n <= 1) {
        return;
    }
    for (SizeType i = 0; i < n - 1; ++i) {
        for (SizeType j = 0; j < points[0].size(); ++j) {
            points[i][j] = (1 - t) * points[i][j] + t * points[i + 1][j];
        }
    }
    decasteljau_recursion(points, n - 1, t);
}

template <std::ranges::random_access_range RandomAccessContainer>
BernsteinPolynomial<RandomAccessContainer>::BernsteinPolynomial(RandomAccessContainer &controlPoints)
    : controlPoints_(controlPoints) {
    storage.resize(controlPoints.size() - 1);
}

template <std::ranges::random_access_range RandomAccessContainer>
BernsteinPolynomial<RandomAccessContainer>::PointType BernsteinPolynomial<RandomAccessContainer>::prime(Real t) {
    auto &scratch_space = storage;
    for (SizeType i = 0; i < controlPoints_.size() - 1; ++i) {
        for (SizeType j = 0; j < controlPoints_[0].size(); ++j) {
            scratch_space[i][j] = controlPoints_[i + 1][j] - controlPoints_[i][j];
        }
    }
    decasteljau_recursion(scratch_space, controlPoints_.size() - 1, t);
    for (SizeType j = 0; j < controlPoints_[0].size(); ++j) {
        scratch_space[0][j] *= (controlPoints_.size() - 1);
    }
    return scratch_space[0];
}

template <std::ranges::random_access_range RandomAccessContainer>
BernsteinPolynomial<RandomAccessContainer>::PointType BernsteinPolynomial<RandomAccessContainer>::operator()(Real t) {
    auto &scratch_space = storage;
    for (SizeType i = 0; i < controlPoints_.size() - 1; ++i) {
        for (SizeType j = 0; j < controlPoints_[0].size(); ++j) {
            scratch_space[i][j] = (1 - t) * controlPoints_[i][j] + t * controlPoints_[i + 1][j];
        }
    }

    decasteljau_recursion(scratch_space, scratch_space.size(), t);
    return scratch_space[0];
}
