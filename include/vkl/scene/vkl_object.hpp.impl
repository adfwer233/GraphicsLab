#include "vkl/scene/vkl_object.hpp"

#include "glm/gtc/quaternion.hpp"
#include "vkl/io/assimp_loader.hpp"

template <VklModelLoader Loader>
VklObject::VklObject(VklDevice &device, ImportBuilder<Loader> builder) : device_(device) {
    Loader model_loader(builder.modelPath);
    auto modelBuilders = model_loader.load_model();

    for (auto modelBuilder : modelBuilders) {
        this->models.push_back(new VklModel(device, modelBuilder));
    }

    modelScaling = glm::vec3(1.0f, 1.0f, 1.0f);
    modelTranslation = glm::vec3(0, 0, 0);
    modelRotation = glm::quat(0.0f, 0.0f, 1.0f, 0.0f);
}

template<typename VertexType, typename IndexType>
VklObject::VklObject(VklDevice &device, MeshModelTemplate<VertexType, IndexType> geom): device_(device) {
    this->models.push_back(new VklModel(device, geom));
    modelScaling = glm::vec3(1.0f, 1.0f, 1.0f);
    modelTranslation = glm::vec3(0, 0, 0);
    modelRotation = glm::quat(0.0f, 0.0f, 1.0f, 0.0f);
}
