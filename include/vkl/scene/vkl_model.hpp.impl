#include <stdexcept>

#include "stb_image.h"

#include "vkl/core/vkl_frame_info.hpp"
#include "vkl/core/vkl_swap_chain.hpp"
#include "vkl/core/vkl_texture.hpp"
#include "vkl/memory/vkl_buffer_destroy_list.hpp"

template <VklVertexType VertexType, VklIndexType IndexType, VklBoxType BoxType>
VklModelTemplate<VertexType, IndexType, BoxType>::VklModelTemplate(VklDevice &device,
                                                                   VklModelTemplate::BuilderFromImmediateData builder)
    : device_(device) {

    if constexpr (std::same_as<BoxType, VklBox2D>) {
        auto min_pos = glm::vec2(999999.0);
        auto max_pos = glm::vec2(-999999.0);

        for (size_t i = 0; i < builder.vertices.size(); i++) {
            min_pos.x = std::min(min_pos.x, builder.vertices[i].position.x);
            min_pos.y = std::min(min_pos.y, builder.vertices[i].position.y);

            max_pos.x = std::max(max_pos.x, builder.vertices[i].position.x);
            max_pos.y = std::max(max_pos.y, builder.vertices[i].position.y);
        }

        box.min_position = min_pos;
        box.max_position = max_pos;
    } else if (std::same_as<BoxType, VklBox3D>) {
        auto min_pos = glm::vec3(999999.0);
        auto max_pos = glm::vec3(-999999.0);

        for (size_t i = 0; i < builder.vertices.size(); i++) {
            min_pos.x = std::min(min_pos.x, builder.vertices[i].position.x);
            min_pos.y = std::min(min_pos.y, builder.vertices[i].position.y);
            min_pos.z = std::min(min_pos.z, builder.vertices[i].position.z);

            max_pos.x = std::max(max_pos.x, builder.vertices[i].position.x);
            max_pos.y = std::max(max_pos.y, builder.vertices[i].position.y);
            max_pos.z = std::max(max_pos.z, builder.vertices[i].position.z);
        }

        box.min_position = min_pos;
        box.max_position = max_pos;
    }

    createVertexBuffers(builder.vertices);
    createIndexBuffers(builder.indices);

    for (const auto &path : builder.texturePaths) {
        createTextureImage(path);
    }

    geometry = std::make_unique<MeshModelTemplate<typename VertexType::geometry_type, IndexType>>();
    for (auto vert : builder.vertices)
        geometry->vertices.push_back(vert);
    for (auto index : builder.indices)
        geometry->indices.push_back(index);

    underlyingGeometry = MeshGeometry{};
}

template <VklVertexType VertexType, VklIndexType IndexType, VklBoxType BoxType>
VklModelTemplate<VertexType, IndexType, BoxType>::VklModelTemplate(
    VklDevice &device, MeshModelTemplate<typename VertexType::geometry_type, IndexType> geometry)
    : device_(device) {
    if constexpr (std::same_as<BoxType, VklBox2D>) {
        auto min_pos = glm::vec2(999999.0);
        auto max_pos = glm::vec2(-999999.0);

        for (size_t i = 0; i < geometry.vertices.size(); i++) {
            min_pos.x = std::min(min_pos.x, geometry.vertices[i].position.x);
            min_pos.y = std::min(min_pos.y, geometry.vertices[i].position.y);

            max_pos.x = std::max(max_pos.x, geometry.vertices[i].position.x);
            max_pos.y = std::max(max_pos.y, geometry.vertices[i].position.y);
        }

        box.min_position = min_pos;
        box.max_position = max_pos;
    } else if (std::same_as<BoxType, VklBox3D>) {
        auto min_pos = glm::vec3(999999.0);
        auto max_pos = glm::vec3(-999999.0);

        for (size_t i = 0; i < geometry.vertices.size(); i++) {
            min_pos.x = std::min(min_pos.x, geometry.vertices[i].position.x);
            min_pos.y = std::min(min_pos.y, geometry.vertices[i].position.y);
            min_pos.z = std::min(min_pos.z, geometry.vertices[i].position.z);

            max_pos.x = std::max(max_pos.x, geometry.vertices[i].position.x);
            max_pos.y = std::max(max_pos.y, geometry.vertices[i].position.y);
            max_pos.z = std::max(max_pos.z, geometry.vertices[i].position.z);
        }

        box.min_position = min_pos;
        box.max_position = max_pos;
    }

    BuilderFromImmediateData builder;
    for (auto vertex : geometry.vertices) {
        builder.vertices.push_back(vertex);
    }
    for (auto index : geometry.indices) {
        builder.indices.push_back(index);
    }

    createVertexBuffers(builder.vertices);
    createIndexBuffers(builder.indices);

    for (const auto &path : builder.texturePaths) {
        createTextureImage(path);
    }

    this->geometry = std::make_unique<MeshModelTemplate<typename VertexType::geometry_type, IndexType>>(geometry);

    underlyingGeometry = MeshGeometry{};
}

template <VklVertexType VertexType, VklIndexType IndexType, VklBoxType BoxType>
VklModelTemplate<VertexType, IndexType, BoxType>::~VklModelTemplate() {
    /** free texture objects */
    for (auto texture : textures_) {
        delete texture;
    }
}

template <VklVertexType VertexType, VklIndexType IndexType, VklBoxType BoxType>
void VklModelTemplate<VertexType, IndexType, BoxType>::createVertexBuffers(const std::vector<VertexType> &vertices) {
    vertexCount_ = static_cast<uint32_t>(vertices.size());
    uint32_t vertexSize = sizeof(typename std::remove_reference<decltype(vertices)>::type::value_type);
    VkDeviceSize bufferSize = vertexSize * vertexCount_;

    VklBuffer stagingBuffer{device_, vertexSize, vertexCount_, VK_BUFFER_USAGE_TRANSFER_SRC_BIT,
                            VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT};

    stagingBuffer.map();
    stagingBuffer.writeToBuffer((void *)vertices.data());

    for (int i = 0; i < VklSwapChain::MAX_FRAMES_IN_FLIGHT; i++) {
        auto vertexBuffer = std::make_unique<VklBuffer>(
            device_, vertexSize, vertexCount_,
            VK_BUFFER_USAGE_STORAGE_BUFFER_BIT | VK_BUFFER_USAGE_VERTEX_BUFFER_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT,
            VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT);

        device_.copyBuffer(stagingBuffer.getBuffer(), vertexBuffer->getBuffer(), bufferSize);

        vertexBuffer_.push_back(std::move(vertexBuffer));
    }
}

template <VklVertexType VertexType, VklIndexType IndexType, VklBoxType BoxType>
void VklModelTemplate<VertexType, IndexType, BoxType>::createIndexBuffers(const std::vector<IndexType> &indices) {
    indexCount_ = static_cast<uint32_t>(indices.size()) * IndexType::vertexCount;
    hasIndexBuffer = indexCount_ > 0;

    if (not hasIndexBuffer)
        return;

    uint32_t indexSize = sizeof(uint32_t);
    VkDeviceSize bufferSize = indexSize * indexCount_;

    VklBuffer stagingBuffer{device_, indexSize, indexCount_, VK_BUFFER_USAGE_TRANSFER_SRC_BIT,
                            VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT};

    stagingBuffer.map();
    stagingBuffer.writeToBuffer((void *)indices.data());

    for (int i = 0; i < VklSwapChain::MAX_FRAMES_IN_FLIGHT; i++) {
        auto indexBuffer = std::make_unique<VklBuffer>(
            device_, indexSize, indexCount_, VK_BUFFER_USAGE_INDEX_BUFFER_BIT | VK_BUFFER_USAGE_TRANSFER_DST_BIT,
            VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT);

        device_.copyBuffer(stagingBuffer.getBuffer(), indexBuffer->getBuffer(), bufferSize);

        indexBuffer_.push_back(std::move(indexBuffer));
    }
}

template <VklVertexType VertexType, VklIndexType IndexType, VklBoxType BoxType>
void VklModelTemplate<VertexType, IndexType, BoxType>::createTextureImage(const std::string &texturePath) {
    int texWidth, texHeight, texChannels;
    stbi_uc *pixels = stbi_load(texturePath.c_str(), &texWidth, &texHeight, &texChannels, STBI_rgb_alpha);
    VkDeviceSize imageSize = texWidth * texHeight * texChannels;

    if (!pixels) {
        throw std::runtime_error("failed to load texture image!");
    }

    if (texChannels == 3) {
        throw std::runtime_error("unsupported texture info");
    }

    VklBuffer stagingBuffer{device_, imageSize, 1, VK_BUFFER_USAGE_TRANSFER_SRC_BIT,
                            VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT};
    stagingBuffer.map();
    stagingBuffer.writeToBuffer((void *)pixels);
    stagingBuffer.unmap();

    auto texture = new VklTexture(device_, texWidth, texHeight, texChannels);

    device_.transitionImageLayout(texture->image_, VK_FORMAT_R8G8B8A8_SRGB, VK_IMAGE_LAYOUT_UNDEFINED,
                                  VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL);
    device_.copyBufferToImage(stagingBuffer.getBuffer(), texture->image_, static_cast<uint32_t>(texWidth),
                              static_cast<uint32_t>(texHeight), 1);
    device_.transitionImageLayout(texture->image_, VK_FORMAT_R8G8B8A8_SRGB, VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL,
                                  VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL);

    this->textures_.push_back(texture);

    stbi_image_free(pixels);
}

template <VklVertexType VertexType, VklIndexType IndexType, VklBoxType BoxType>
void VklModelTemplate<VertexType, IndexType, BoxType>::addTextureFromImage(VkImage image) {
    auto texture = new VklTexture(device_, image);

    this->textures_.push_back(texture);
}

template <VklVertexType VertexType, VklIndexType IndexType, VklBoxType BoxType>
void VklModelTemplate<VertexType, IndexType, BoxType>::bind(VkCommandBuffer commandBuffer) {
    VkBuffer buffers[] = {vertexBuffer_[0]->getBuffer()};
    VkDeviceSize offsets[] = {0};

    vkCmdBindVertexBuffers(commandBuffer, 0, 1, buffers, offsets);

    if (hasIndexBuffer) {
        vkCmdBindIndexBuffer(commandBuffer, indexBuffer_[0]->getBuffer(), 0, VK_INDEX_TYPE_UINT32);
    }
}

template <VklVertexType VertexType, VklIndexType IndexType, VklBoxType BoxType>
void VklModelTemplate<VertexType, IndexType, BoxType>::draw(VkCommandBuffer commandBuffer) {
    if (hasIndexBuffer) {
        vkCmdDrawIndexed(commandBuffer, indexCount_, 1, 0, 0, 0);
    } else {
        vkCmdDraw(commandBuffer, vertexCount_, 1, 0, 0);
    }
}

template <VklVertexType VertexType, VklIndexType IndexType, VklBoxType BoxType>
void VklModelTemplate<VertexType, IndexType, BoxType>::allocDescriptorSets(VklDescriptorSetLayout &setLayout,
                                                                           VklDescriptorPool &pool) {
    uniformBuffers.resize(VklSwapChain::MAX_FRAMES_IN_FLIGHT);
    descriptorSets.resize(VklSwapChain::MAX_FRAMES_IN_FLIGHT);

    for (int i = 0; i < uniformBuffers.size(); i++) {
        uniformBuffers[i] = std::make_unique<VklBuffer>(
            device_, sizeof(GlobalUbo), 1, VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT, VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT);
        uniformBuffers[i]->map();
    }

    if (textures_.empty()) {
        for (int i = 0; i < descriptorSets.size(); i++) {
            auto bufferInfo = uniformBuffers[i]->descriptorInfo();
            VklDescriptorWriter(setLayout, pool).writeBuffer(0, &bufferInfo).build(descriptorSets[i]);
        }
    } else {
        for (int i = 0; i < descriptorSets.size(); i++) {
            auto bufferInfo = uniformBuffers[i]->descriptorInfo();
            auto imageInfo = textures_[0]->descriptorInfo();
            VklDescriptorWriter(setLayout, pool)
                .writeBuffer(0, &bufferInfo)
                .writeImage(1, &imageInfo)
                .build(descriptorSets[i]);
        }
    }
}

template <VklVertexType VertexType, VklIndexType IndexType, VklBoxType BoxType>
int VklModelTemplate<VertexType, IndexType, BoxType>::get_triangle_num() const {
    int result = 0;
    result += this->geometry->indices.size();
    return result;
}

template <VklVertexType VertexType, VklIndexType IndexType, VklBoxType BoxType>
void VklModelTemplate<VertexType, IndexType, BoxType>::allocDescriptorSets(VklDescriptorPool &pool) {
    if (this->descriptorSetLayout_ == VK_NULL_HANDLE) {
        createDescriptorSetLayout();
    }
    allocDescriptorSets(*this->descriptorSetLayout_, pool);
}

template <VklVertexType VertexType, VklIndexType IndexType, VklBoxType BoxType>
void VklModelTemplate<VertexType, IndexType, BoxType>::createDescriptorSetLayout() {
    auto setLayoutBuilder = VklDescriptorSetLayout::Builder(device_).addBinding(0, VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER,
                                                                                VK_SHADER_STAGE_ALL_GRAPHICS);
    for (int i = 0; i < this->textures_.size(); i++) {
        setLayoutBuilder.addBinding(i + 1, VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER, VK_SHADER_STAGE_FRAGMENT_BIT);
    }
    this->descriptorSetLayout_ = setLayoutBuilder.build();
}

template <VklVertexType VertexType, VklIndexType IndexType, VklBoxType BoxType>
void VklModelTemplate<VertexType, IndexType, BoxType>::updateVertexBuffer() {
    vertexCount_ = static_cast<uint32_t>(geometry->vertices.size());
    uint32_t vertexSize = sizeof(typename std::remove_reference<decltype(geometry->vertices)>::type::value_type);
    VkDeviceSize bufferSize = vertexSize * vertexCount_;

    VklBuffer stagingBuffer{device_, vertexSize, vertexCount_, VK_BUFFER_USAGE_TRANSFER_SRC_BIT,
                            VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT};

    stagingBuffer.map();
    stagingBuffer.writeToBuffer((void *)geometry->vertices.data());

    for (int i = 0; i < VklSwapChain::MAX_FRAMES_IN_FLIGHT; i++) {
        auto vertexBuffer = vertexBuffer_[i].get();

        device_.copyBuffer(stagingBuffer.getBuffer(), vertexBuffer->getBuffer(), bufferSize);
    }
}

template<VklVertexType VertexType, VklIndexType IndexType, VklBoxType BoxType>
void VklModelTemplate<VertexType, IndexType, BoxType>::reallocateVertexBuffer() {
    for (auto& buffer: vertexBuffer_) {
        auto ins = VklBufferDestroyList::instance();
        ins->destroyBuffer(buffer);
    }
    vertexBuffer_.clear();

    BuilderFromImmediateData builder;
    for (auto vertex : geometry->vertices) {
        builder.vertices.push_back(vertex);
    }
    for (auto index : geometry->indices) {
        builder.indices.push_back(index);
    }

    createVertexBuffers(builder.vertices);
    createIndexBuffers(builder.indices);
}
