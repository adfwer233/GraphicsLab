#include "vkl_push_constant.hpp"

template <VklPushConstant... args>
template <typename T, T... indices>
constexpr void VklPushConstantInfoList<args...>::getDataRawPointerLoop(std::integer_sequence<T, indices...>) {
    ((rawPointers[indices] = (void *)&std::get<NthTypeOf<indices, args>>(data[indices])), ...);
}

template <VklPushConstant... args>
std::array<void *, sizeof...(args)> VklPushConstantInfoList<args...>::getDataRawPointer() {
    constexpr int n = sizeof...(args);
    constexpr auto index_seq = std::make_integer_sequence<int, n>{};
    getDataRawPointerLoop(index_seq);
    return rawPointers;
}

template <VklPushConstant... args>
std::vector<VkPushConstantRange> VklPushConstantInfoList<args...>::getPushConstantInfo() {
    int n = sizeof...(args);

    std::vector<VkPushConstantRange> pushConstantInfo(n);
    std::vector<VkShaderStageFlags> pushConstantFlags = {(args::getStageFlags())...};
    std::vector<size_t> pushConstantSize = {(sizeof(args))...};

    for (int i = 0; i < n; i++) {
        pushConstantInfo[i].stageFlags = pushConstantFlags[i];
        pushConstantInfo[i].size = pushConstantSize[i];
        pushConstantInfo[i].offset = 0;
    }

    return pushConstantInfo;
}