#include "simple_render_system.hpp"

#include <iostream>
#include <stdexcept>

#include "spdlog/spdlog.h"
#include "spirv_cross.hpp"
#include "spirv_glsl.hpp"

template <typename T>
concept HasPoolSize = requires {
    { T::poolSize } -> std::convertible_to<int>;
};

template <uint32_t Subpass, VklPushConstantInfoListConcept PushConstantInfoList,
          VklPipelineModifierType PipelineModifierType>
SimpleRenderSystem<Subpass, PushConstantInfoList, PipelineModifierType>::SimpleRenderSystem(
    VklDevice &device, VkRenderPass renderPass, std::vector<VklShaderModuleInfo> shaderInfos)
    : device_(device) {

    auto GetByteCode1 = [](std::string filename) -> std::vector<uint32_t> {
        std::ifstream file(filename, std::ios::ate | std::ios::binary);

        if (!file.is_open())
            throw std::runtime_error("failed to open file!");

        size_t fileSize = (size_t)file.tellg();
        std::vector<uint32_t> bytecode(fileSize / sizeof(uint32_t));

        file.seekg(0);
        file.read((char *)bytecode.data(), bytecode.size() * sizeof(uint32_t));
        file.close();
        return bytecode;
    };

    // Function to get the size of a SPIRType in bytes
    auto GetTypeSize = [](const spirv_cross::Compiler &compiler, const spirv_cross::SPIRType &type) {
        size_t size = 0;
        switch (type.basetype) {
        case spirv_cross::SPIRType::Char:
            size = 1;
            break;
        case spirv_cross::SPIRType::Float:
        case spirv_cross::SPIRType::Int:
        case spirv_cross::SPIRType::UInt:
            size = 4;
            break;
        case spirv_cross::SPIRType::Double:
        case spirv_cross::SPIRType::Int64:
        case spirv_cross::SPIRType::UInt64:
            size = 8;
            break;
            // Add more cases as necessary
        default:
            throw std::runtime_error("Unsupported type");
        }
        return size * type.columns * type.vecsize;
    };

    auto descriptorSetLayoutBuilder = VklDescriptorSetLayout::Builder(device_);

    for (auto shaderInfo : shaderInfos) {
        std::vector<uint32_t> bytecode = GetByteCode1(shaderInfo.shaderPath_);

        spirv_cross::Compiler compiler(bytecode.data(), bytecode.size());

        spdlog::debug("compiling ", shaderInfo.shaderPath_);

        auto entryPoints = compiler.get_entry_points_and_stages();

        switch (entryPoints[0].execution_model) {
        case spv::ExecutionModel::ExecutionModelVertex:
            spdlog::debug("Vertex Shader");
            break;
        case spv::ExecutionModel::ExecutionModelGeometry:
            spdlog::debug("Geometry Shader");
            break;
        case spv::ExecutionModel::ExecutionModelFragment:
            spdlog::debug("Fragment Shader");
            break;
        case spv::ExecutionModel::ExecutionModelGLCompute:
            spdlog::debug("Compute Shader");
        default:
            break;
        }

        spirv_cross::ShaderResources resources = compiler.get_shader_resources();

        if (entryPoints.front().execution_model == spv::ExecutionModel::ExecutionModelVertex) {
            auto &vertex_input = resources.stage_inputs;

            for (auto &input : vertex_input) {
                auto &base_type = compiler.get_type(input.base_type_id);
                uint32_t location = compiler.get_decoration(input.id, spv::DecorationLocation);
                uint32_t size = GetTypeSize(compiler, base_type);

                this->attributeDescriptions.push_back({location, 0, VK_FORMAT_R32G32B32_SFLOAT, size});
                spdlog::debug("{} {} {}", input.name, location, size);
            }

            uint32_t offset = 0;
            std::ranges::sort(attributeDescriptions, [](auto &l, auto &r) { return l.location < r.location; });
            for (auto &attr : attributeDescriptions) {
                auto size = attr.offset;
                attr.offset = offset;
                offset += size;
            }

            bindingDescriptions.push_back({.binding = 0, .stride = offset, .inputRate = VK_VERTEX_INPUT_RATE_VERTEX});
        }

        struct SetResources {
            std::vector<spirv_cross::Resource> uniformBuffers;
            std::vector<spirv_cross::Resource> imageSamplers;
            std::vector<spirv_cross::Resource> storageBuffers;
            std::vector<spirv_cross::Resource> storageImages;
        };
        std::vector<SetResources> setResources;
        for (const auto &buffer : resources.uniform_buffers) {
            uint32_t setShaderId = compiler.get_decoration(buffer.id, spv::DecorationDescriptorSet);
            uint32_t bindingIndex = compiler.get_decoration(buffer.id, spv::DecorationBinding);

            auto &type = compiler.get_type(buffer.type_id);
            auto declaredSize = static_cast<uint32_t>(compiler.get_declared_struct_size(type));

            spdlog::debug("Uniform Buffer {}, shader id {}, binding {}, declared size {}\n", buffer.name, setShaderId,
                         bindingIndex, declaredSize);
            if (setShaderId >= setResources.size())
                setResources.resize(setShaderId + 1);
            setResources[setShaderId].uniformBuffers.push_back(buffer);
        }

        for (const auto &image : resources.sampled_images) {
            uint32_t setShaderId = compiler.get_decoration(image.id, spv::DecorationDescriptorSet);
            uint32_t bindingIndex = compiler.get_decoration(image.id, spv::DecorationBinding);
            spdlog::debug("Sampled Images {}, shader id {}, binding {}\n", image.name, setShaderId, bindingIndex);
        }

        for (const auto &buffer : resources.storage_buffers) {
            uint32_t setShaderId = compiler.get_decoration(buffer.id, spv::DecorationDescriptorSet);
            uint32_t bindingIndex = compiler.get_decoration(buffer.id, spv::DecorationBinding);
            spdlog::debug("Storage Buffer {}, shader id {}, binding {} \n", buffer.name, setShaderId, bindingIndex);
        }

        descriptorSetLayoutBuilder.addBindingsFromResource(compiler, resources);
    }

    descriptorSetLayout = descriptorSetLayoutBuilder.build();

    int poolSizeValue = 2000;

    if constexpr (HasPoolSize<PipelineModifierType>)
        poolSizeValue = PipelineModifierType::poolSize;

    descriptorPool =
        VklDescriptorPool::Builder(device_)
            .setMaxSets(VklSwapChain::MAX_FRAMES_IN_FLIGHT * poolSizeValue)
            .addPoolSize(VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER, VklSwapChain::MAX_FRAMES_IN_FLIGHT * poolSizeValue)
            .build();

    createPipelineLayout();
    createPipeline(renderPass, shaderInfos);
}

template <uint32_t Subpass, VklPushConstantInfoListConcept PushConstantInfoList,
          VklPipelineModifierType PipelineModifierType>
SimpleRenderSystem<Subpass, PushConstantInfoList, PipelineModifierType>::~SimpleRenderSystem() {
    vkDestroyPipelineLayout(device_.device(), pipelineLayout_, nullptr);
}

template <uint32_t Subpass, VklPushConstantInfoListConcept PushConstantInfoList,
          VklPipelineModifierType PipelineModifierType>
void SimpleRenderSystem<Subpass, PushConstantInfoList, PipelineModifierType>::createPipelineLayout() {
    pushConstantRanges_ = PushConstantInfoList::getPushConstantInfo();

    std::vector<VkDescriptorSetLayout> descriptorSetLayouts{descriptorSetLayout->getDescriptorSetLayout()};

    VkPipelineLayoutCreateInfo pipelineLayoutInfo{};
    pipelineLayoutInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO;
    pipelineLayoutInfo.setLayoutCount = static_cast<uint32_t>(descriptorSetLayouts.size());
    pipelineLayoutInfo.pSetLayouts = descriptorSetLayouts.data();
    pipelineLayoutInfo.pushConstantRangeCount = static_cast<uint32_t>(pushConstantRanges_.size());
    pipelineLayoutInfo.pPushConstantRanges = pushConstantRanges_.data();

    if (vkCreatePipelineLayout(device_.device(), &pipelineLayoutInfo, nullptr, &pipelineLayout_) != VK_SUCCESS) {
        throw std::runtime_error("failed to create pipeline layout!");
    }
}

template <uint32_t Subpass, VklPushConstantInfoListConcept PushConstantInfoList,
          VklPipelineModifierType PipelineModifierType>
void SimpleRenderSystem<Subpass, PushConstantInfoList, PipelineModifierType>::createPipeline(
    VkRenderPass renderPass, std::vector<VklShaderModuleInfo> shaderInfos) {
    PipelineConfigInfo pipelineConfigInfo{};

    VklGraphicsPipeline::defaultPipelineConfigInfo(device_, pipelineConfigInfo);

    PipelineModifierType::modifyPipeline(pipelineConfigInfo);

    pipelineConfigInfo.renderPass = renderPass;
    pipelineConfigInfo.pipelineLayout = pipelineLayout_;
    pipelineConfigInfo.subpass = Subpass;

    pipelineConfigInfo.bindingDescriptions = bindingDescriptions;
    pipelineConfigInfo.attributeDescriptions = attributeDescriptions;

    pipeline_ = std::make_unique<VklGraphicsPipeline>(device_, shaderInfos, pipelineConfigInfo);
}

template <uint32_t Subpass, VklPushConstantInfoListConcept PushConstantInfoList,
          VklPipelineModifierType PipelineModifierType>
template <VklRenderable ModelType>
void SimpleRenderSystem<Subpass, PushConstantInfoList, PipelineModifierType>::renderObject(
    FrameInfo<ModelType> &frameInfo, PushConstantInfoList pushData) {
    frameInfo.model.allocDescriptorSets(*descriptorSetLayout, *descriptorPool);

    vkCmdBindPipeline(frameInfo.commandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pipeline_->graphicsPipeline_);

    vkCmdBindDescriptorSets(
        frameInfo.commandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pipelineLayout_, 0, 1,
        &frameInfo.model.descriptorSetsMap[descriptorSetLayout->descriptorSetLayoutKey][frameInfo.frameIndex], 0,
        nullptr);

    auto pushConstantRawPointers = pushData.getDataRawPointer();

    for (int i = 0; auto pushRange : pushConstantRanges_) {
        vkCmdPushConstants(frameInfo.commandBuffer, pipelineLayout_, pushRange.stageFlags, pushRange.offset,
                           pushRange.size, pushConstantRawPointers[i]);
        i++;
    }

    frameInfo.model.bind(frameInfo.commandBuffer);
    frameInfo.model.draw(frameInfo.commandBuffer);
}

template <uint32_t Subpass, VklPushConstantInfoListConcept PushConstantInfoList,
          VklPipelineModifierType PipelineModifierType>
template <VklRenderable ModelType>
void SimpleRenderSystem<Subpass, PushConstantInfoList, PipelineModifierType>::renderObject(
    FrameInfo<ModelType> &frameInfo) {
    frameInfo.model.allocDescriptorSets(*descriptorSetLayout, *descriptorPool);
    vkCmdBindPipeline(frameInfo.commandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pipeline_->graphicsPipeline_);

    vkCmdBindDescriptorSets(
        frameInfo.commandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pipelineLayout_, 0, 1,
        &frameInfo.model.descriptorSetsMap[descriptorSetLayout->descriptorSetLayoutKey][frameInfo.frameIndex], 0,
        nullptr);

    frameInfo.model.bind(frameInfo.commandBuffer);
    frameInfo.model.draw(frameInfo.commandBuffer);
}

template <uint32_t Subpass, VklPushConstantInfoListConcept PushConstantInfoList,
          VklPipelineModifierType PipelineModifierType>
void SimpleRenderSystem<Subpass, PushConstantInfoList, PipelineModifierType>::renderPipeline(
    VkCommandBuffer commandBuffer, std::optional<PushConstantInfoList> pushData,
    std::optional<VkDescriptorSet *> descriptorSet) {
    VkBuffer buffers[] = {Vkl::DummyBuffer::getDummyBuffer(device_)};
    VkDeviceSize offsets[] = {0};

    vkCmdBindPipeline(commandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pipeline_->graphicsPipeline_);

    if (pushData.has_value()) {
        auto pushConstantRawPointers = pushData.value().getDataRawPointer();
        for (int i = 0; auto pushRange : pushConstantRanges_) {
            vkCmdPushConstants(commandBuffer, pipelineLayout_, pushRange.stageFlags, pushRange.offset, pushRange.size,
                               pushConstantRawPointers[i]);
            i++;
        }
    }

    if (descriptorSet.has_value()) {
        vkCmdBindDescriptorSets(commandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pipelineLayout_, 0, 1,
                                descriptorSet.value(), 0, nullptr);
    }

    vkCmdBindVertexBuffers(commandBuffer, 0, 1, buffers, offsets);
    vkCmdDraw(commandBuffer, 1, 1, 0, 0);
}