#include "simple_render_system.hpp"

#include <stdexcept>

template <VklVertexType VertexType, uint32_t Subpass, VklPushConstantInfoListConcept PushConstantInfoList,
          VklPipelineModifierType PipelineModifierType>
SimpleRenderSystem<VertexType, Subpass, PushConstantInfoList, PipelineModifierType>::SimpleRenderSystem(
    VklDevice &device, VkRenderPass renderPass, VkDescriptorSetLayout globalSetLayout,
    std::vector<VklShaderModuleInfo> shaderInfos)
    : device_(device) {
    createPipelineLayout(globalSetLayout);
    createPipeline(renderPass, shaderInfos);
}

template <VklVertexType VertexType, uint32_t Subpass, VklPushConstantInfoListConcept PushConstantInfoList,
          VklPipelineModifierType PipelineModifierType>
SimpleRenderSystem<VertexType, Subpass, PushConstantInfoList, PipelineModifierType>::~SimpleRenderSystem() {
    vkDestroyPipelineLayout(device_.device(), pipelineLayout_, nullptr);
}

template <VklVertexType VertexType, uint32_t Subpass, VklPushConstantInfoListConcept PushConstantInfoList,
          VklPipelineModifierType PipelineModifierType>
void SimpleRenderSystem<VertexType, Subpass, PushConstantInfoList, PipelineModifierType>::createPipelineLayout(
    VkDescriptorSetLayout globalSetLayout) {
    pushConstantRanges_ = PushConstantInfoList::getPushConstantInfo();

    std::vector<VkDescriptorSetLayout> descriptorSetLayouts{globalSetLayout};

    VkPipelineLayoutCreateInfo pipelineLayoutInfo{};
    pipelineLayoutInfo.sType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO;
    pipelineLayoutInfo.setLayoutCount = static_cast<uint32_t>(descriptorSetLayouts.size());
    pipelineLayoutInfo.pSetLayouts = descriptorSetLayouts.data();
    pipelineLayoutInfo.pushConstantRangeCount = static_cast<uint32_t>(pushConstantRanges_.size());
    pipelineLayoutInfo.pPushConstantRanges = pushConstantRanges_.data();

    if (vkCreatePipelineLayout(device_.device(), &pipelineLayoutInfo, nullptr, &pipelineLayout_) != VK_SUCCESS) {
        throw std::runtime_error("failed to create pipeline layout!");
    }
}

template <VklVertexType VertexType, uint32_t Subpass, VklPushConstantInfoListConcept PushConstantInfoList,
          VklPipelineModifierType PipelineModifierType>
void SimpleRenderSystem<VertexType, Subpass, PushConstantInfoList, PipelineModifierType>::createPipeline(
    VkRenderPass renderPass, std::vector<VklShaderModuleInfo> shaderInfos) {
    PipelineConfigInfo pipelineConfigInfo{};

    VklGraphicsPipeline<VertexType>::defaultPipelineConfigInfo(pipelineConfigInfo);

    PipelineModifierType::modifyPipeline(pipelineConfigInfo);

    pipelineConfigInfo.renderPass = renderPass;
    pipelineConfigInfo.pipelineLayout = pipelineLayout_;
    pipelineConfigInfo.subpass = Subpass;
    pipeline_ = std::make_unique<VklGraphicsPipeline<VertexType>>(device_, shaderInfos, pipelineConfigInfo);
}

template <VklVertexType VertexType, uint32_t Subpass, VklPushConstantInfoListConcept PushConstantInfoList,
          VklPipelineModifierType PipelineModifierType>
template <VklRenderable ModelType>
void SimpleRenderSystem<VertexType, Subpass, PushConstantInfoList, PipelineModifierType>::renderObject(
    FrameInfo<ModelType> &frameInfo, PushConstantInfoList pushData) {

    vkCmdBindPipeline(frameInfo.commandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pipeline_->graphicsPipeline_);

    vkCmdBindDescriptorSets(frameInfo.commandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pipelineLayout_, 0, 1,
                            frameInfo.pGlobalDescriptorSet, 0, nullptr);

    auto pushConstantRawPointers = pushData.getDataRawPointer();

    for (int i = 0; auto pushRange : pushConstantRanges_) {
        vkCmdPushConstants(frameInfo.commandBuffer, pipelineLayout_, pushRange.stageFlags, pushRange.offset,
                           pushRange.size, pushConstantRawPointers[i]);
        i++;
    }

    frameInfo.model.bind(frameInfo.commandBuffer);
    frameInfo.model.draw(frameInfo.commandBuffer);
}

template <VklVertexType VertexType, uint32_t Subpass, VklPushConstantInfoListConcept PushConstantInfoList,
          VklPipelineModifierType PipelineModifierType>
template <VklRenderable ModelType>
void SimpleRenderSystem<VertexType, Subpass, PushConstantInfoList, PipelineModifierType>::renderObject(
    FrameInfo<ModelType> &frameInfo) {

    vkCmdBindPipeline(frameInfo.commandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pipeline_->graphicsPipeline_);

    vkCmdBindDescriptorSets(frameInfo.commandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, pipelineLayout_, 0, 1,
                            frameInfo.pGlobalDescriptorSet, 0, nullptr);

    frameInfo.model.bind(frameInfo.commandBuffer);
    frameInfo.model.draw(frameInfo.commandBuffer);
}
