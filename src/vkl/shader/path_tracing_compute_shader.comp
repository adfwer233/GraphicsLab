#version 450

// definitions

struct material {
    uint materialType;
    float metallic;
    float roughness;
    float ao;
    vec3 albedo;
};

struct triangle {
    vec3 v0;
    vec3 v1;
    vec3 v2;
    uint materialIndex;
};

struct light {
    uint triangleIndex;
    float area;
};

struct bvhNode {
    vec3 min;
    vec3 max;
    int leftNodeIndex;
    int rightNodeIndex;
    int objectIndex;
};

#define LIGHT_MATERIAL 0
#define LAMBERTIAN_MATERIAL 1
#define METAL_MATERIAL 2
#define GLASS_MATERIAL 3

struct onb {
    vec3 u;
    vec3 v;
    vec3 w;
};

onb Onb(vec3 n) {
    onb res;
    res.w = normalize(n);
    vec3 a = (abs(res.w.x) > 0.9) ? vec3(0,1,0) : vec3(1,0,0);
    res.v = normalize(cross(res.w, a));
    res.u = cross(res.w, res.v);
    return res;
}

vec3 onbLocal(vec3 a, onb o) {
    return a.x * o.u + a.y * o.v + a.z * o.w;
}

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(binding = 0) uniform UniformBufferObject {
    vec3 cameraPosition;
    vec3 cameraUp;
    vec3 cameraFront;
    float cameraZoom;
    float time;
    uint currentSample;
    uint numTriangles;
    uint numLights;
} ubo;

const float pi = 3.1415926535897932385;

// random generator

float random() {
    vec2 co = gl_GlobalInvocationID.xy + vec2(ubo.currentSample, 233 * ubo.currentSample);
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

float random(float min, float max) {
    // Returns a random real in [min,max).
    return min + (max-min)*random();
}

vec3 random_in_unit_sphere() {
    vec3 p = vec3(random(-0.3,0.3),random(-0.3,0.3),random(-0.3,0.3));
    return normalize(p);
}

vec3 random_in_hemisphere(vec3 normal) {
    vec3 in_unit_sphere = random_in_unit_sphere();
    if (dot(in_unit_sphere, normal) > 0.0) // In the same hemisphere as the normal
    return in_unit_sphere;
    else
    return -in_unit_sphere;
}

vec3 random_cosine_direction() {
    float r1 = random();
    float r2 = random();
    float z = sqrt(1-r2);

    float phi = 2*pi*r1;
    float x = cos(phi)*sqrt(r2);
    float y = sin(phi)*sqrt(r2);

    return vec3(x, y, z);
}

struct Ray {
    vec3 origin;
    vec3 dir;
};

vec3 rayAt (Ray r, float t) {
    return r.origin + t * r.dir;
}

struct hitRecord {
    vec3 p;
    vec3 normal;
    uint materialIndex;
    float t;
    int backFaceInt;
    float scatterPdf;
    float samplePdf;
};

layout(binding = 1, rgba8) uniform image2D targetTexture;
layout(binding = 2, rgba8) uniform image2D accumulationTexture;

layout(std430, binding = 3) readonly buffer TriangleBufferObject {
    triangle[] triangles;
};

layout(std430, binding = 4) readonly buffer MaterialBufferObject {
    material[] materials;
};

layout(std430, binding = 5) readonly buffer AabbBufferObject {
    bvhNode[] bvh;
};

layout(std430, binding = 6) readonly buffer LightsBufferObject {
    light[] lights;
};

vec3 sampleLambertian(vec3 normal, inout float pdf) {
    onb uvw = Onb(normal);
    vec3 randomCos = random_cosine_direction();
    vec3 randomCosScattered = normalize(onbLocal(randomCos, uvw));
    float cosine = dot(normalize(normal), randomCosScattered);
    pdf = max(0.01, cosine) / pi;

    return randomCosScattered;
}

vec3 randomOnATriangle(uint triangleIndex) {
    float s = random();
    float t = random();

    vec3 v01 = - triangles[triangleIndex].v0 + triangles[triangleIndex].v1;
    vec3 v02 = - triangles[triangleIndex].v0 + triangles[triangleIndex].v2;
    return triangles[triangleIndex].v0 + s * v01 + t * v02;
}

vec3 sampleLight(vec3 p, inout float pdf, inout float lightCosine) {
    int lightIndex = int(floor(lights.length() * random()));
    vec3 onLight = randomOnATriangle(lights[lightIndex].triangleIndex);
    vec3 toLight = onLight - p;
    float distanceSquared = dot(toLight, toLight);
    toLight = normalize(toLight);
    lightCosine = abs(toLight.y);

    pdf = distanceSquared / (lights.length() * lightCosine * lights[lightIndex].area);
    return toLight;
}

vec3 sampleGlass(vec3 I, hitRecord rec, inout float pdf) {
    pdf = 1;
    float ir = 1.5;
    float refraction_ratio = (1 - rec.backFaceInt) * 1.0/ir + rec.backFaceInt * ir;
    vec3 i = normalize(I);
    float cos_theta = min(dot(-i, rec.normal), 1.0);
    float sin_theta = sqrt(1.0 - cos_theta*cos_theta);
    float t = floor(clamp(refraction_ratio * sin_theta, 0, 1));

    return t*reflect(i, rec.normal) + (1-t)*refract(i, rec.normal, refraction_ratio);
}

vec3 sampleMetal(vec3 I, vec3 normal, inout float pdf) {
    pdf = 1;
    return reflect(I, normal);
}

float distributionGGX(vec3 N, vec3 H, float roughness) {
    float a_square = roughness * roughness;
    float n_dot_h = dot(N, H);
    float n_dot_h_square = n_dot_h * n_dot_h;

    float nom = a_square;
    float denom = n_dot_h_square * (a_square - 1) + 1;
    denom = pi * denom * denom;

    return nom / denom;
}

float geometrySchlickGGX(float NdotV, float k) {
    float nom   = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return nom / denom;
}

float geometrySmith(vec3 N, vec3 V, vec3 L, float k) {
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx1 = geometrySchlickGGX(NdotV, k);
    float ggx2 = geometrySchlickGGX(NdotL, k);

    return ggx1 * ggx2;
}

vec3 fresnelSchlick(float cosTheta, vec3 F0) {
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}

bool scatter(Ray ray, inout hitRecord rec, inout vec3 factor, inout vec3 ambient, inout Ray scatteredRay) {
    vec3 albedo = materials[rec.materialIndex].albedo;

    float metallic = materials[rec.materialIndex].metallic;
    float roughness = materials[rec.materialIndex].roughness;
    float ao = materials[rec.materialIndex].ao;

    float materialSamplePdf;
    vec3 materialSample;

    if (materials[rec.materialIndex].materialType == LAMBERTIAN_MATERIAL) {
        materialSample = sampleLambertian(rec.normal, materialSamplePdf);
    } else if(materials[rec.materialIndex].materialType == GLASS_MATERIAL) {
        materialSample = sampleGlass(ray.dir, rec, materialSamplePdf);
    } else if(materials[rec.materialIndex].materialType == METAL_MATERIAL) {
        materialSample = sampleMetal(ray.dir, rec.normal, materialSamplePdf);
    } else if(materials[rec.materialIndex].materialType == LIGHT_MATERIAL) {
        factor = vec3(0.0);
        ambient = vec3(1.0);
        return true;
    }

    float lightSamplePdf = materialSamplePdf;
    vec3 finalSample = materialSample;

    if (random() < 0.2 && materials[rec.materialIndex].materialType != LIGHT_MATERIAL) {
        // sample light
        float lightCosine;
        finalSample = sampleLight(rec.p, lightSamplePdf, lightCosine);

        if(abs(lightCosine) < 0.001) {
            finalSample = materialSample;
            lightSamplePdf = materialSamplePdf;
        }
    }

    finalSample = normalize(finalSample);
    scatteredRay = Ray(rec.p + 0.0001 * finalSample, finalSample);

    vec3 F0 = vec3(0.04);
    F0 = mix(F0, albedo, metallic);

    vec3 N = rec.normal;
    vec3 V = normalize(ray.dir);
    vec3 H = normalize(V + normalize(finalSample));

    float D = distributionGGX(rec.normal, H, roughness);
    float G = geometrySmith(rec.normal, V, finalSample, roughness);
    vec3 F = fresnelSchlick(max(dot(H, finalSample), 0.0), F0);

    vec3 k_s = F;
    vec3 k_d = vec3(1.0) - k_s;
    k_d *= (1.0 - metallic);

    vec3 nominator = D * G * F;
    float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, finalSample), 0.0) + 0.001;
    vec3 specular = nominator / denominator;

    vec3 brdf = k_d * albedo / pi + specular;

    factor =  brdf * max(dot(N, finalSample), 0.0) / materialSamplePdf;
    ambient = vec3(0.03) * albedo * ao;

    rec.samplePdf = 0.95 * materialSamplePdf + 0.05 * lightSamplePdf;
    rec.scatterPdf = materialSamplePdf;

    return materials[rec.materialIndex].materialType == LIGHT_MATERIAL;
}

vec3 triIntersect(in Ray ray, triangle tri, inout vec3 n) {
    vec3 a = tri.v0 - tri.v1;
    vec3 b = tri.v2 - tri.v0;
    vec3 p = tri.v0 - ray.origin;

    vec3 q = cross(p, ray.dir);
    n = cross(b, a);
    float idot = 1.0 / dot(ray.dir, n);

    float u = dot(q, b) * idot;
    float v = dot(q, a) * idot;
    float t = dot(n, p) * idot;

    return vec3(t, u, v);
}

bool hitTriangle(int triangle_index, Ray r, float tMin, float tMax, inout hitRecord rec) {
    triangle t = triangles[triangle_index];
    vec3 n = vec3(0,0,0);
    vec3 hit = triIntersect(r, t, n);
    if (!(hit.y < 0.0 || hit.y > 1.0 || hit.z < 0.0 || (hit.y + hit.z) > 1.0)) {
        rec.p = r.origin + hit.x * r.dir;
        rec.normal =  normalize(n);
        rec.backFaceInt = dot(r.dir,rec.normal) > 0 ? 1 : 0;
        rec.normal *=  1 - 2 * rec.backFaceInt;
        rec.p +=  rec.normal * 0.0001;
        rec.t = hit.x;
        rec.materialIndex = t.materialIndex;
        return hit.x > tMin && hit.x < tMax;
    }
    return false;
}

vec2 intersectAABB(Ray r, vec3 boxMin, vec3 boxMax) {
    vec3 tMin = (boxMin - r.origin) / r.dir;
    vec3 tMax = (boxMax - r.origin) / r.dir;
    vec3 t1 = min(tMin, tMax);
    vec3 t2 = max(tMin, tMax);
    float tNear = max(max(t1.x, t1.y), t1.z);
    float tFar = min(min(t2.x, t2.y), t2.z);
    return vec2(tNear, tFar);
}

#define MAX_STACK_DEPTH 50
bool hitBvh(Ray ray, inout hitRecord rec) {
    float tMin = 0.001;
    float tMax = 10000;

    bool hitAnything = false;
    float closetSoFar = tMax;

    int nodeStack[MAX_STACK_DEPTH];
    int stackIndex = 0;

    nodeStack[stackIndex] = 0;
    stackIndex++;

    while (stackIndex > 0 && stackIndex < MAX_STACK_DEPTH) {
        stackIndex--;
        int currentNode = nodeStack[stackIndex];

        if (currentNode == -1) continue;

//        if (ray.dir.x > 0)
//            hitAnything = true;

        vec2 tIntersect = intersectAABB(ray, bvh[currentNode].min, bvh[currentNode].max);
        if (tIntersect.x > tIntersect.y) continue;

//        if (stackIndex >= 2)
//            hitAnything = true;

        int ti = bvh[currentNode].objectIndex;
        if (ti != -1) {
            hitRecord tempRec;
            if (hitTriangle(ti, ray, tMin, closetSoFar, tempRec)) {
                hitAnything = true;
                closetSoFar = tempRec.t;
                rec = tempRec;
            }
        }

        nodeStack[stackIndex] = bvh[currentNode].leftNodeIndex;
        stackIndex++;

        nodeStack[stackIndex] = bvh[currentNode].rightNodeIndex;
        stackIndex++;
    }

    return hitAnything;
}

#define NUM_BOUNCES 3
vec3 rayColor(Ray ray) {
    vec3 unitDirection = normalize(ray.dir);
    hitRecord rec;

    vec3 finalColor = vec3(0.0);
    Ray currentRay = {ray.origin, ray.dir};

    vec3 factorNodeStack[NUM_BOUNCES + 3];
    vec3 ambientNodeStack[NUM_BOUNCES + 3];
    int stackIndex = 0;

    while(stackIndex < NUM_BOUNCES) {
        if (hitBvh(currentRay, rec)) {
            bool emits = scatter(currentRay, rec, factorNodeStack[stackIndex], ambientNodeStack[stackIndex], currentRay);
            stackIndex++;
            if (emits) {
                finalColor = vec3(1.0);
                break;
            }
        } else {
            break;
        }
    }

    for (int i = stackIndex - 1; i >= 0; i--) {
        finalColor = finalColor * factorNodeStack[i] + ambientNodeStack[i];
    }

    return finalColor;
}

void main() {
    vec2 imageSize = imageSize(targetTexture);

    float theta = ubo.cameraZoom * 3.1415926 / 180;
    float h = tan(theta / 2);
    float viewportHeight = 2.0 * h;
    float viewportWidth = imageSize.x / imageSize.y * viewportHeight;

    vec3 vertical = viewportHeight * -ubo.cameraUp;
    vec3 horizontal = viewportWidth * normalize(cross(ubo.cameraFront, ubo.cameraUp));

    vec3 origin = ubo.cameraPosition;
    vec3 lowerLeftCorner = origin + ubo.cameraFront - horizontal / 2 - vertical / 2;

    vec2 uv = gl_GlobalInvocationID.xy / imageSize.xy;
    Ray ray = {origin, lowerLeftCorner + uv.x * horizontal + uv.y * vertical - origin};
    vec3 pixelColor = rayColor(ray);

    vec4 currentColor = imageLoad(accumulationTexture, ivec2(gl_GlobalInvocationID.xy)).rgba * min(ubo.currentSample, 1.0);
    vec4 colorToWrite = (vec4(pixelColor, 1.0) + currentColor * ubo.currentSample) / (1.0 + ubo.currentSample);

    if (ubo.currentSample <= 2) {
        colorToWrite = vec4(0.0, 0.0, 0.0, 1.0);
    }

    imageStore(targetTexture, ivec2(gl_GlobalInvocationID.xy), colorToWrite);
}