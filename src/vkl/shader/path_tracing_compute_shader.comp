#version 450

// definitions

struct material {
    uint materialType;
    vec3 albedo;
};

struct triangle {
    vec3 v0;
    vec3 v1;
    vec3 v2;
    uint materialIndex;
};

struct light {
    uint triangleIndex;
    float area;
};

struct bvhNode {
    vec3 min;
    vec3 max;
    int leftNodeIndex;
    int rightNodeIndex;
    int objectIndex;
};

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(binding = 0) uniform UniformBufferObject {
    vec3 cameraPosition;
    vec3 cameraUp;
    vec3 cameraFront;
    float cameraZoom;
    float time;
    uint currentSample;
    uint numTriangles;
    uint numLights;
} ubo;

struct Ray {
    vec3 origin;
    vec3 dir;
};

vec3 rayAt (Ray r, float t) {
    return r.origin + t * r.dir;
}

struct hitRecord {
    vec3 p;
    vec3 normal;
    uint materialIndex;
    float t;
};

layout(binding = 1, rgba8) uniform image2D targetTexture;
layout(binding = 2, rgba8) uniform image2D accumulationTexture;

layout(std430, binding = 3) readonly buffer TriangleBufferObject {
    triangle[] triangles;
};

layout(std430, binding = 4) readonly buffer MaterialBufferObject {
    material[] materials;
};

layout(std430, binding = 5) readonly buffer AabbBufferObject {
    bvhNode[] bvh;
};

layout(std430, binding = 6) readonly buffer LightsBufferObject {
    light[] lights;
};

vec3 triIntersect(in Ray ray, triangle tri, inout vec3 n) {
    vec3 a = tri.v0 - tri.v1;
    vec3 b = tri.v2 - tri.v0;
    vec3 p = tri.v0 - ray.origin;

    vec3 q = cross(p, ray.dir);
    n = cross(b, a);
    float idot = 1.0 / dot(ray.dir, n);

    float u = dot(q, b) * idot;
    float v = dot(q, a) * idot;
    float t = dot(n, p) * idot;

    return vec3(t, u, v);
}

bool hitTriangle(int triangle_index, Ray r, float tMin, float tMax, inout hitRecord rec) {
    triangle t = triangles[triangle_index];
    vec3 n = vec3(0,0,0);
    vec3 hit = triIntersect(r, t, n);
    if (!(hit.y < 0.0 || hit.y > 1.0 || hit.z < 0.0 || (hit.y + hit.z) > 1.0)) {
        rec.p = r.origin + hit.x * r.dir;
        rec.normal =  normalize(n);
//        rec.backFaceInt = dot(r.dir,rec.normal) > 0 ? 1 : 0;
        rec.p +=  rec.normal*0.0001;
        rec.t = hit.x;
        rec.materialIndex = t.materialIndex;
        return hit.x > tMin && hit.x < tMax;
    }
    return false;
}

vec2 intersectAABB(Ray r, vec3 boxMin, vec3 boxMax) {
    vec3 tMin = (boxMin - r.origin) / r.dir;
    vec3 tMax = (boxMax - r.origin) / r.dir;
    vec3 t1 = min(tMin, tMax);
    vec3 t2 = max(tMin, tMax);
    float tNear = max(max(t1.x, t1.y), t1.z);
    float tFar = min(min(t2.x, t2.y), t2.z);
    return vec2(tNear, tFar);
}

#define MAX_STACK_DEPTH 50
bool hitBvh(Ray ray, inout hitRecord rec) {
    float tMin = 0.001;
    float tMax = 10000;

    bool hitAnything = false;
    float closetSoFar = tMax;

    int nodeStack[MAX_STACK_DEPTH];
    int stackIndex = 0;

    nodeStack[stackIndex] = 0;
    stackIndex++;

    while (stackIndex > 0 && stackIndex < MAX_STACK_DEPTH) {
        stackIndex--;
        int currentNode = nodeStack[stackIndex];

        if (currentNode == -1) continue;

//        if (ray.dir.x > 0)
//            hitAnything = true;

        vec2 tIntersect = intersectAABB(ray, bvh[currentNode].min, bvh[currentNode].max);
        if (tIntersect.x > tIntersect.y) continue;

//        if (stackIndex >= 2)
//            hitAnything = true;

        int ti = bvh[currentNode].objectIndex;
        if (ti != -1) {
            hitRecord tempRec;
            if (hitTriangle(ti, ray, tMin, closetSoFar, tempRec)) {
                hitAnything = true;
                closetSoFar = tempRec.t;
                rec = tempRec;
            }
        }

        nodeStack[stackIndex] = bvh[currentNode].leftNodeIndex;
        stackIndex++;

        nodeStack[stackIndex] = bvh[currentNode].rightNodeIndex;
        stackIndex++;
    }

    return hitAnything;
}

#define NUM_BOUNCES 2
vec3 rayColor(Ray ray) {
    vec3 unitDirection = normalize(ray.dir);
    hitRecord rec;

    vec3 finalColor = vec3(1.0);
    Ray currentRay = {ray.origin, ray.dir};

    for (int i = 0; i < NUM_BOUNCES; i++) {
        if (hitBvh(currentRay, rec)) {
//            vec3 albedo;
//            bool emits = scatter(currentRay, rec, albedo, currentRay);
//            finalColor *= albedo;

            finalColor = vec3(1.0, 0, 0);
            break;
        } else {
            finalColor = vec3(0, 1.0, 0);
            break;
        }
    }

    return finalColor;
}

void main() {
    vec2 imageSize = imageSize(targetTexture);

    float theta = 90 * 3.1415926 / 180;
    float h = tan(theta / 2);
    float viewportHeight = 2.0 * h;
    float viewportWidth = imageSize.x / imageSize.y * viewportHeight;

    vec3 vertical = viewportHeight * vec3(0, -1, 0);
    vec3 horizontal = viewportWidth * vec3(1, 0, 0);

    vec3 origin = vec3(0, 0, 3);
    vec3 lowerLeftCorner = origin + vec3(0, 0, -1) - horizontal / 2 - vertical / 2;

    vec2 uv = gl_GlobalInvocationID.xy / imageSize.xy;
    Ray ray = {origin, lowerLeftCorner + uv.x * horizontal + uv.y * vertical - origin};
    vec3 pixelColor = rayColor(ray);

    vec4 currentColor = imageLoad(accumulationTexture, ivec2(gl_GlobalInvocationID.xy)).rgba * min(ubo.currentSample, 1.0);
    vec4 colorToWrite = (vec4(pixelColor, 1.0) + currentColor * ubo.currentSample) / (1.0 + ubo.currentSample);

    imageStore(targetTexture, ivec2(gl_GlobalInvocationID.xy), vec4(pixelColor, 1.0));
}